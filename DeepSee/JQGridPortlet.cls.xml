<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="DeepSee.JQGridPortlet">
<Super>%DeepSee.Component.Portlet.abstractPortlet,%ZEN.Component.page,DeepSee.ListingInterface</Super>
<TimeCreated>62734,57803.667351</TimeCreated>

<Parameter name="INCLUDEFILES">
<Default>style:http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css,style:http://www.trirand.net/themes/ui.jqgrid.css,script:http://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js,script:http://code.jquery.com/ui/1.10.3/jquery-ui.js,script:http://www.trirand.net/js/trirand/i18n/grid.locale-ru.js,script:http://www.trirand.net/js/trirand/jquery.jqGrid.min.js,script:themeswitchertool.js</Default>
</Parameter>

<Property name="pager">
<Type>%Boolean</Type>
</Property>

<Property name="enableListing">
<Type>%Boolean</Type>
</Property>

<Property name="excelExport">
<Type>%Boolean</Type>
</Property>

<Property name="rownumbers">
<Type>%Boolean</Type>
</Property>

<Property name="viewrecords">
<Type>%Boolean</Type>
</Property>

<Property name="gridview">
<Type>%Boolean</Type>
</Property>

<Property name="filterToolbar">
<Type>%Boolean</Type>
</Property>

<Property name="rowLabels">
<Type>%Boolean</Type>
</Property>

<Property name="target">
<Type>%String</Type>
</Property>

<Method name="%OnGetPortletName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "jQuery Grid"
]]></Implementation>
</Method>

<Method name="%OnGetPortletIcon">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit "deepsee/ds2_list_44.png"
]]></Implementation>
</Method>

<Method name="%OnGetPortletSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pInfo:%List</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill pInfo
	// $LB(name,value,type,caption,title)

	set pInfo($I(pInfo)) = $LB("pager",1,"%Boolean",$$$Text("Enable pager?","%DeepSee"),"")
	set pInfo($I(pInfo)) = $LB("rownumbers",1,"%Boolean",$$$Text("Rows numbering","%DeepSee"),"")
	set pInfo($I(pInfo)) = $LB("viewrecords",1,"%Boolean",$$$Text("viewrecords","%DeepSee"),"")
	set pInfo($I(pInfo)) = $LB("gridview",1,"%Boolean",$$$Text("gridview","%DeepSee"),"")
	set pInfo($I(pInfo)) = $LB("filterToolbar",0,"%Boolean",$$$Text("Enable filter toolbar?","%DeepSee"),"")
	set pInfo($I(pInfo)) = $LB("rowLabels",1,"%Boolean",$$$Text("Enable row labels?","%DeepSee"),"")
	set pInfo($I(pInfo)) = $LB("enableListing",1,"%Boolean",$$$Text("Enable listing detalization?","%DeepSee"),"")
	
	set pInfo($I(pInfo)) = $LB("excelExport",1,"%Boolean",$$$Text("Allow export to Excel?","%DeepSee"),"")
		
	quit $$$OK
]]></Implementation>
</Method>

<Method name="%DrawHTML">
<Implementation><![CDATA[
	// This causes ZEN to render this component on the client.
	set ..renderFlag = ..renderFlag + 1
	
	// copy ..settings into properties
	#dim propName As %String = $order(..settings(""))
	while (propName '= "")
	{
		if ("" '= $get(..settings(propName)))
			try
			{
				set $property($this, propName) = ..settings(propName)
			}
			catch {}

		set propName = $order(..settings(propName))
	}

	&html<
	<div id="portletMain#(..index)#" style="width:100%;height:100%"><table id="jqgrid#(..index)#" style="width:100%; height:100%"></table>>
	if ..pager &html<<div id="jqpager#(..index)#"/></div></div>
	<div id="wrapper#(..index)#" style="display:none;"><table id="grid#(..index)#" style="width:100%; height:100%;"></table>
	<div id="pager#(..index)#"></div>
	</div>
	>
	d ##class(DeepSee.ListingInterface).DrawHTML()
]]></Implementation>
</Method>

<Method name="saveAsExcel">
<FormalSpec>self</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
		var gridData = jQuery(this).jqGrid('getRowData');
	    if (typeof(gridData) !== "undefined")
    	{
        var arr =gridData;
        
        var csv = '';
        var i = 0;
        for (i=0;i<arr.length;i++) {

            var row = arr[i];
           
            var csv_row = [];
            for (var key in row){
	           
                var val = row[key].replace(";", ":");
                //BAD thing, take from locale
                var val = row[key].replace(".", ",");
                //console.log(val);
                csv_row.push(val);
            }

            csv += csv_row.join(";");

            if (i<arr.length-1)
                csv +='\r\n';

            
        };
        csv = encodeURIComponent(csv);
        
		
		var link = document.createElement("a");
		jQuery(link).hide();
		link.setAttribute("href", "data:application/csv;charset=utf-8,"+csv);
		link.setAttribute("download", "my_data.csv");
		link.click();
    	}
]]></Implementation>
</Method>

<Method name="renderContents">
<Description>
Client-side method to render control.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	renderListingButton(this, "portletMain");
	
	jQuery("#jqgrid"+this.index).jqGrid('clearGridData');
		jQuery("#jqgrid"+this.index).GridUnload(); // destroy the grid saving the table and pager
	
	// connect to controller
	var controller = this.getConnectedController();
	
	if (!controller) return;
	
	   

	// are we connected to a pivot table?
	var isPivot = controller.getSelectedRange;
	
	var dim = (isPivot ? 2 : 1);
	var seriesSize = controller.getDimSize(dim);
	var colNames = [];
	var colModel = [];
	
	// add label column
	if (this.rowLabels)
	{
		colNames[0] = "";
		colModel[0] = {name:"__label", index:"__label"};
	}
	
	// add columns
	for (var p = 0; p < seriesSize; p++)
	{
		var propName = controller.getPropertyName(p);
			
		if (!isPivot && propName.charAt(0) == '%') continue;   // KPI special columns
		
		colNames[colNames.length] = controller.getLabel(p, dim);
		colModel[colModel.length] = {name:propName, index:propName};
	}
		
	
	jQuery("#jqgrid"+this.index).jqGrid({
		datatype: 'local'
		, pager: (this.pager ? '#jqpager'+this.index : '')
		, rownumbers: this.rownumbers // A new column at left of the grid is added. The purpose of this column is to count the number of available rows, beginning from 1.
		, viewrecords: this.viewrecords // jqGrid displays the beginning and ending record number in the grid
		, gridview: this.gridview
		, colNames: colNames
		, colModel: colModel
		, onSelectRow : function(e){ controller.selectCellRange(+e+1,1,+e+1,colNames.length); }
		});
	

		
	if(this.filterToolbar || this.excelExport)
	jQuery("#jqgrid"+this.index).jqGrid('navGrid','#jqpager'+this.index,{edit:false,add:false,del:false,csv:true,position: 'left'});
	
		if(this.filterToolbar)
		jQuery("#jqgrid"+this.index).jqGrid('filterToolbar', {searchOnEnter:false});
		
		if (this.excelExport)
		jQuery("#jqgrid"+this.index).jqGrid('navButtonAdd','#jqpager'+this.index,{id:'pager_csv',caption:'',title:'Export To CSV',onClickButton : this.saveAsExcel, buttonicon:'ui-icon-document'}); 

	    
	
	this.acquireData();
]]></Implementation>
</Method>

<Method name="notifyViewHandler">
<Description>
Notification that the dataController associated with this dataView has raised an event.</Description>
<FormalSpec>reason,data1,data2,data3</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//console.log(reason);
	switch(reason) 
	{
		case 'dataChange':
			this.renderContents();
			
			break;
		case 'modelChange':
			this.renderContents();
			this.acquireData();
			break;
	}
]]></Implementation>
</Method>

<Method name="getConnectedController">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// connect to controller
	var controller = this.getController();
	if (null == controller) 
	{
		// try to connect to dataController
		this.connectToController();
		controller = this.getController();
	}
	
	return controller;
]]></Implementation>
</Method>

<Method name="GetListingData">
<ClassMethod>1</ClassMethod>
<FormalSpec>curQuery:%String,selR:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	q ##class(DeepSee.ListingInterface).GetListingSql(curQuery,selR)
]]></Implementation>
</Method>

<Method name="acquireData">
<Description>
Load data and populate the grid</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// connect to controller
	var controller = this.getConnectedController();
	window.contr=controller;
	if (!controller) return;
	
	// 
	// Check out if listing is set as datasource
	//
	if(controller.isDrillThrough)
	{
		var self=this;
		var curQuery = controller.GetCurrentQueryText();
		var selR= "1,1,1,1";
		var gridData=JSON.parse(zenClassMethod(self,'GetListingData','L,L','String',[curQuery,selR.toString()]));
		var colModel=[];
	    var colNames=[];

		for (var key in gridData[0]) colModel.push({"name":key,"index":key});
	    for (var key in gridData[0]) colNames.push(key);
	   
	   	$("#jqgrid"+this.index).GridUnload();
		jQuery("#jqgrid"+this.index).jqGrid({
		datatype: 'local'
		, data:gridData
		, pager: (this.pager ? '#jqpager'+this.index : '')
		, rownumbers: this.rownumbers // A new column at left of the grid is added. The purpose of this column is to count the number of available rows, beginning from 1.
		, viewrecords: this.viewrecords // jqGrid displays the beginning and ending record number in the grid
		, gridview: this.gridview
		, colNames: colNames
		, colModel: colModel
		, onSelectRow : function(e){ controller.selectCellRange(+e+1,1,+e+1,colNames.length); }
		});
	

		
		
		if(this.filterToolbar || this.excelExport)
		jQuery("#jqgrid"+this.index).jqGrid('navGrid','#jqpager'+this.index,{edit:false,add:false,del:false,csv:true,position: 'left'});
	
		if(this.filterToolbar)
		jQuery("#jqgrid"+this.index).jqGrid('filterToolbar', {searchOnEnter:false});
		
		if (this.excelExport)
		jQuery("#jqgrid"+this.index).jqGrid('navButtonAdd','#jqpager'+this.index,{id:'pager_csv',caption:'',title:'Export To CSV',onClickButton : this.saveAsExcel, buttonicon:'ui-icon-document'}); 
		
		return;
	}
	
	
	// are we connected to a pivot table?
	var isPivot = controller.getSelectedRange;
	if (!isPivot)
	{
		var labelDim = 2;
		var seriesSize = controller.getDimSize(1);
		var seriesCount = controller.getDimSize(2);
	}
	else
	{
		var labelDim = 1;
		var seriesSize = controller.getDimSize(2);
		var seriesCount = controller.getDimSize(1);
	}
// populate props array
var props = [];
for (var p = 0;p < seriesSize;p++)
	{
		var propName = controller.getPropertyName(p);
		if (!isPivot && propName.charAt(0) == '%') continue;
		// KPI special columns
		props[props.length] = {name:propName, index:p};
	}
	
	// add rows to grid
	var rows = new Array;
	for (var n = 0; n < seriesCount; n++)
	{
		var rowData = Object.create(null);
		
		if (this.rowLabels)
			rowData["__label"]=controller.getLabel(n, labelDim);
		
		for (var p = 0; p < props.length; p++)
			rowData[props[p].name]= 
					isPivot ? controller.getData(n, props[p].index) : controller.getData(props[p].index, n);

		rowData['idd']= n
		rows[n] = rowData
	}
	
	jQuery("#jqgrid"+this.index).jqGrid('addRowData', 'idd', rows);
]]></Implementation>
</Method>

<Method name="adjustContentSize">
<Description>
Notification from the containing widget that the page is loaded or the widget is resized.
Subclass can implement this, if they wish.</Description>
<FormalSpec>load,width,height</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	resizeGrid(this,width,height);
	jQuery("#jqgrid"+this.index).setGridWidth(width - 4);
	jQuery("#jqgrid"+this.index).setGridHeight(height - 1 - jQuery("#gbox_jqgrid"+this.index).height() + jQuery("#gbox_jqgrid"+this.index+" .ui-jqgrid-bdiv").height());
]]></Implementation>
</Method>
</Class>
</Export>
