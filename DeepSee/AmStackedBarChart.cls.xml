<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="DeepSee.AmStackedBarChart">
<Super>AbstractAmChart,%DeepSee.Component.Portlet.abstractPortlet</Super>
<TimeCreated>63026,69808.341377</TimeCreated>

<Method name="%OnGetPortletName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit "AmCharts: Stacked Bar Chart"
]]></Implementation>
</Method>

<Method name="%OnGetPortletIcon">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit "deepsee/table_48.gif"
]]></Implementation>
</Method>

<Method name="acquireData">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// clear old data
	
	// connect to controller
	var controller = this.getConnectedController();
	if (!controller) return;
	
	// are we connected to a pivot table?
	var isPivot = controller.getSelectedRange;
	if (!isPivot)
	{
		var labelDim = 2;
		var seriesSize = controller.getDimSize(1);
		var seriesCount = controller.getDimSize(2);
	}
	else
	{
		var labelDim = 1;
		var seriesSize = controller.getDimSize(2);
		var seriesCount = controller.getDimSize(1);
	}

	// populate props array
	var props = [];
	for(var yearVal=0;yearVal <  seriesSize;yearVal++)
	{
		var propName = controller.getPropertyName(yearVal);
		if (!isPivot && propName.charAt(0) == '%') continue;  // KPI special columns
		props[yearVal] = {year:propName, index:yearVal};
		props[yearVal].names=new Array;
		props[yearVal].sC=seriesCount;
	for (var p = 0; p <seriesCount; p++)
	{
		var tempStr=controller.getLabel(p,labelDim)
		props[yearVal][p]=controller.getData(p,yearVal);
		props[yearVal].names[p]=tempStr;
	}
	}
return props;
]]></Implementation>
</Method>

<Method name="renderContents">
<Description>
Client-side method to render control.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//renderListingButton(this);
     this.renderSameParts(this);   
    var chart;
	var chartData=this.acquireData();
    
    /*
     // SERIAL CHART
    chart = new AmCharts.AmSerialChart();
    chart.dataProvider = chartData;
    chart.categoryField = "year";
    chart.plotAreaBorderAlpha = 0.2;
    chart.rotate = true;

    // AXES
    // Category
    var categoryAxis = chart.categoryAxis;
    categoryAxis.gridAlpha = 0.1;
    categoryAxis.axisAlpha = 0;
    categoryAxis.gridPosition = "start";

    // value                      
    var valueAxis = new AmCharts.ValueAxis();
    valueAxis.stackType = "regular";
    valueAxis.gridAlpha = 0.1;
    valueAxis.axisAlpha = 0;
    chart.addValueAxis(valueAxis);
    
    chart.dataProvider = chartData;
    chart.categoryField = "year";
    chart.startDuration = 1;
    chart.plotAreaBorderColor = "#DADADA";
    chart.plotAreaBorderAlpha = 1;
    // this single line makes the chart a bar chart          
    chart.rotate = true;
	var graph = new Array;
	for(var i=0;i<chartData[0].sC;i++)
	{
	graph[i] = new AmCharts.AmGraph();
    graph[i].type = "column";
    graph[i].title = chartData[0].names[i];
    graph[i].valueField = i.toString();
    graph[i].balloonText = chartData[0].names[i]+":[[value]]";
    graph[i].lineAlpha = 0;
    graph[i].fillColors = AmCharts.randomColor();
    graph[i].fillAlphas = 1;
    chart.addGraph(graph[i]);
	}
   
   
    

    // LEGEND
    var legend = new AmCharts.AmLegend();
    chart.addLegend(legend);

    // WRITE
    chart.write("amchart"+this.index);
    this.chart = chart;
    */
    
    chart = new AmCharts.AmSerialChart();
    chart.dataProvider = chartData;
    chart.categoryField = "year";
    chart.plotAreaBorderAlpha = 0.2;
    chart.rotate = true;
    
    // AXES
    // Category
    var categoryAxis = chart.categoryAxis;
    categoryAxis.gridAlpha = 0.1;
    categoryAxis.axisAlpha = 0;
    categoryAxis.gridPosition = "start";
    
    // value                      
    var valueAxis = new AmCharts.ValueAxis();
    valueAxis.stackType = "regular";
    valueAxis.gridAlpha = 0.1;
    valueAxis.axisAlpha = 0;
    chart.addValueAxis(valueAxis);
    
    // GRAPHS
    // firstgraph 
    var graph = new Array;
    for(var i=0;i<chartData[0].sC;i++)
	{
	graph[i] = new AmCharts.AmGraph();
    graph[i].type = "column";
    graph[i].title = chartData[0].names[i];
    graph[i].valueField = i.toString();
    graph[i].balloonText = chartData[0].names[i]+":[[value]]";
    graph[i].lineAlpha = 0;
    graph[i].fillColors = AmCharts.randomColor();
    graph[i].fillAlphas = 0.75;
    chart.addGraph(graph[i]);
	}
	
   
    
    
    // LEGEND
    var legend = new AmCharts.AmLegend();
    legend.position = "right";
    legend.borderAlpha = 0.3;
    legend.horizontalGap = 10;
    legend.switchType = "v";
    chart.addLegend(legend);
    
    // WRITE
    chart.write("amchart"+this.index);
    this.chart=chart;
    //This part is for ONclick
    var temppivot = this.getConnectedController(); //need this @clickGraphItem event
        chart.addListener("clickGraphItem", 
    	function (event) {
	   		
	   		for(var i=0;i<event.chart.graphs.length;i++)
	   		{
		   		event.chart.graphs[i].fillAlphas=0.75;
	   		}
	   		event.graph.fillAlphas = 1;
        	event.chart.validateNow();
        	console.log(event);
    	   	temppivot.selectCellRange(event.graph.index+1,0,event.graph.index+1,0);
    	   	return false;
  });
]]></Implementation>
</Method>
</Class>
</Export>
