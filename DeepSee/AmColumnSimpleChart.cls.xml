<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="DeepSee.AmColumnSimpleChart">
<Super>AbstractAmChart</Super>
<TimeCreated>63028,46882.866516</TimeCreated>

<Method name="%OnGetPortletName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit "AmCharts: Simple Column Chart"
]]></Implementation>
</Method>

<Method name="%OnGetPortletIcon">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    quit "deepsee/ds_chart_bar.png"
]]></Implementation>
</Method>

<Method name="acquireData">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	
	
	
	
	// connect to controller
	var controller = this.getConnectedController();
	if (!controller) return;
	
	// are we connected to a pivot table?
	var isPivot = controller.getSelectedRange;
	if (!isPivot)
	{
		var labelDim = 2;
		var seriesSize = controller.getDimSize(1);
		var seriesCount = controller.getDimSize(2);
	}
	else
	{
		var labelDim = 1;
		var seriesSize = controller.getDimSize(2);
		var seriesCount = controller.getDimSize(1);
	}
	
	//For amcharts
	// populate props array
	var props = [];
	for(var yearVal=0;yearVal <  seriesCount;yearVal++)
	{
		//var propName = controller.getPropertyName(yearVal);
		var propName = controller.getLabel(yearVal,labelDim);
		if (!isPivot && propName.charAt(0) == '%') continue;  // KPI special columns
		props[yearVal] = {name:this.captionsFromSource?propName:this.captions.split(',')[yearVal], index:yearVal}
		props[yearVal].val=controller.getData(yearVal,0);
	}
	
return props;
]]></Implementation>
</Method>

<Method name="renderContents">
<Description>
Client-side method to render control.</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	
	renderListingButton(this);

	//AmCharts Chart Start Point
       var chart;
       var chartData=this.acquireData();
   
    
    
    // SERIAL CHART
    chart = new AmCharts.AmSerialChart();
    chart.dataProvider = chartData;
    chart.categoryField = "name";
    chart.startDuration = 1;

    // AXES
    // category
    var categoryAxis = chart.categoryAxis;
    categoryAxis.labelRotation = 90;
    categoryAxis.gridPosition = "start";

    // value
    // in case you don't want to change default settings of value axis,
    // you don't need to create it, as one value axis is created automatically.
    // GRAPH
    var graph = new AmCharts.AmGraph();
    graph.valueField = "val";
    graph.balloonText = this.hintText?this.hintText:"[[category]]: [[value]]";
    graph.type = "column";
    graph.lineAlpha = 0;
    graph.fillAlphas = 0.5;
    graph.alphaField= "fill";
    
    if (this.barColor !=""){
    graph.fillColors = "#"+this.barColor;
    }
    chart.addGraph(graph);
    chart.rotate = true;
   
    chart.write("amchart"+this.index);
    this.chart = chart;
    
    //This part is for ONclick
    var temppivot = this.getConnectedController(); //need this @clickGraphItem event
        chart.addListener("clickGraphItem", 
    	function (event) {
	    	event.item.dataContext.fill=1;
        	event.chart.validateData();
    	   	temppivot.selectCellRange(event.index+1,0,event.index+1,0);
  });
]]></Implementation>
</Method>
</Class>
</Export>
